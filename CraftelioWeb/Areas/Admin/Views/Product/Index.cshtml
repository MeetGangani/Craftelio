@model IEnumerable<Craftelio.Models.Product>
<div class="container p-3">
    <div class="row pt-4">
        <div class="col-6">
            <h2 class="text-primary">Product List</h2>
        </div>
        <div class="col-6 text-end">
            <a asp-controller="Product"
               asp-action="Upsert"
               class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New Product
            </a>
        </div>
    </div>

    @if (TempData["error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3">
            @TempData["error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mt-3">
            @TempData["success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info mt-4">
            No products found.
        </div>
    }
    else
    {
        <div class="row mb-3 mt-4">
            <div class="col-md-4">
                <div class="input-group shadow-sm">
                    <label class="input-group-text bg-primary text-white" for="categoryFilter">Category:</label>
                    <select id="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @{
                            var categories = Model.Select(p => p.Category)
                            .Where(c => c != null)
                            .DistinctBy(c => c.Id)
                            .OrderBy(c => c.Name);
                        }
                        @foreach (var category in categories)
                        {
                            <option value="@category.Name">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table id="productsTable" class="table table-bordered table-striped table-hover">
                <thead class="table-primary">
                    <tr>
                        <th>Title</th>
                        <th>Price</th>
                        <th>Author</th>
                        <th>Category</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderBy(p => p.Title))
                    {
                        <tr data-category="@(item.Category?.Name ?? "")">
                            <td>@item.Title</td>
                            <td>@item.Price.ToString("C", new System.Globalization.CultureInfo("en-IN"))</td>
                            <td>@item.Author</td>
                            <td>@(item.Category?.Name ?? "No Category")</td>
                            <td class="text-center">
                                <div class="btn-group" role="group">
                                    <a asp-action="Upsert" asp-route-id="@item.Id"
                                       class="btn btn-primary btn-sm mx-1"
                                       data-bs-toggle="tooltip"
                                       title="Edit Product">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                    <button onclick="deleteProduct(@item.Id)"
                                            class="btn btn-danger btn-sm mx-1"
                                            data-bs-toggle="tooltip"
                                            title="Delete Product">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize Bootstrap tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Category filter
            $('#categoryFilter').change(function () {
                var selectedCategory = $(this).val();
                if (selectedCategory === "") {
                    $('#productsTable tbody tr').fadeIn(200);
                } else {
                    $('#productsTable tbody tr').hide();
                    $('#productsTable tbody tr[data-category="' + selectedCategory + '"]').fadeIn(200);
                }
            });
        });

        function deleteProduct(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/Product/Delete/' + id,
                        type: 'DELETE',
                        success: function (response) {
                            if (response.success) {
                                Swal.fire(
                                    'Deleted!',
                                    'Product has been deleted.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    response.message,
                                    'error'
                                );
                            }
                        },
                        error: function () {
                            Swal.fire(
                                'Error!',
                                'An error occurred while deleting the product.',
                                'error'
                            );
                        }
                    });
                }
            });
        }
    </script>
}